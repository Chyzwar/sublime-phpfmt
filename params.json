{"name":"Sublime-phpfmt","tagline":"","body":"# [php.fmt](https://github.com/dericofilho/php.tools) support for Sublime Text 2/3\r\n\r\n\r\nphp.fmt, php.tools and php.oracle aim to help PHP development. The following features are available through command palette (`ctrl+shift+P` or `cmd+shift+P`) :\r\n\r\n *  phpfmt: toggle format on save - handy if the code is small and you don't want to worry about formatting.\r\n *  phpfmt: format now - if format on save is disabled, you can manually format the code.\r\n *  phpfmt: format selection - formats only the selected code\r\n *  phpfmt: toggle auto align - it aligns vertically equals and fat arrow symbols\r\n *  phpfmt: toggle indent with space - for those who don't *like* indentation with tabs.\r\n *  phpfmt: toggle visibility order - ensure PSR2 ยง4.2. `[final|static] [private|protected|public] [$variable|function]...`\r\n *  phpfmt: getter and setter (snake_case) - analyses the classes in the file and add setters/getters - set_variable()/get_variable()\r\n *  phpfmt: getter and setter (camelCase) - analyses the classes in the file and add setters/getters - setVariable()/getVariable()\r\n *  phpfmt: getter and setter (Go) - analyses the classes in the file and add setters/getters - SetVariable()/Variable()\r\n\r\noptions which applies code analysis to work:\r\n\r\n *  phpfmt: build autocomplete database - analyse the code and generates a database used for autocomplete and automatic insertion of dependencies\r\n *  phpfmt: toggle autocomplete - GoSublime autocomplete style\r\n *  phpfmt: toggle dependency autoimport\r\n *  phpfmt: analyse this - analyse the current word, and seek for information such: class hierarchical data, implemented interfaces and methods.\r\n\r\n\r\n### What does it do?\r\n<table>\r\n<tr>\r\n<td>Before</td>\r\n<td>After</td>\r\n</tr>\r\n<tr>\r\n<td>\r\n<pre><code>&lt;?php\r\nfor($i = 0; $i &lt; 10; $i++)\r\n{\r\nif($i%2==0)\r\necho \"Flipflop\";\r\n}\r\n</code></pre>\r\n</td>\r\n<td>\r\n<pre><code>&lt;?php\r\nfor ($i = 0; $i &lt; 10; $i++) {\r\n\tif ($i%2 == 0) {\r\n\t\techo \"Flipflop\";\r\n\t}\r\n}\r\n</code></pre>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>\r\n<pre><code>&lt;?php\r\n$a = 10;\r\n$otherVar = 20;\r\n$third = 30;\r\n</code></pre>\r\n</td>\r\n<td>\r\n<pre><code>&lt;?php\r\n$a        = 10;\r\n$otherVar = 20;\r\n$third    = 30;\r\n</code></pre>\r\n<i>This can be disabled with the option \"disable_auto_align\"</i>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>\r\n<pre><code>&lt;?php\r\nnamespace NS\\Something;\r\nuse \\OtherNS\\C;\r\nuse \\OtherNS\\B;\r\nuse \\OtherNS\\A;\r\nuse \\OtherNS\\D;\r\n\r\n$a = new A();\r\n$b = new C();\r\n$d = new D();\r\n</code></pre>\r\n</td>\r\n<td>\r\n<pre><code>&lt;?php\r\nnamespace NS\\Something;\r\n\r\nuse \\OtherNS\\A;\r\nuse \\OtherNS\\C;\r\nuse \\OtherNS\\D;\r\n\r\n$a = new A();\r\n$b = new C();\r\n$d = new D();\r\n</code></pre>\r\n<i>note how it sorts the use clauses, and removes unused ones</i>\r\n</td>\r\n</tr>\r\n</table>\r\n\r\n### What does it do? - PSR version\r\n<table>\r\n<tr>\r\n<td>Before</td>\r\n<td>After</td>\r\n</tr>\r\n<tr>\r\n<td>\r\n<pre><code>&lt;?php\r\nfor($i = 0; $i &lt; 10; $i++)\r\n{\r\nif($i%2==0)\r\necho \"Flipflop\";\r\n}\r\n</code></pre>\r\n</td>\r\n<td>\r\n<pre><code>&lt;?php\r\nfor ($i = 0; $i &lt; 10; $i++) {\r\n    if ($i%2 == 0) {\r\n        echo \"Flipflop\";\r\n    }\r\n}\r\n</code></pre>\r\n<i>Note the identation of 4 spaces.</i>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>\r\n<pre><code>&lt;?php\r\nclass A {\r\nfunction a(){\r\nreturn 10;\r\n}\r\n}\r\n</code></pre>\r\n</td>\r\n<td>\r\n<pre><code>&lt;?php\r\nclass A\r\n{\r\n    public function a()\r\n    {\r\n        return 10;\r\n    }\r\n}\r\n</code></pre>\r\n<i>Note the braces position, and the visibility adjustment in the method a().</i>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>\r\n<pre><code>&lt;?php\r\nnamespace NS\\Something;\r\nuse \\OtherNS\\C;\r\nuse \\OtherNS\\B;\r\nuse \\OtherNS\\A;\r\nuse \\OtherNS\\D;\r\n\r\n$a = new A();\r\n$b = new C();\r\n$d = new D();\r\n</code></pre>\r\n</td>\r\n<td>\r\n<pre><code>&lt;?php\r\nnamespace NS\\Something;\r\n\r\nuse \\OtherNS\\A;\r\nuse \\OtherNS\\C;\r\nuse \\OtherNS\\D;\r\n\r\n$a = new A();\r\n$b = new C();\r\n$d = new D();\r\n</code></pre>\r\n<i>note how it sorts the use clauses, and removes unused ones</i>\r\n</td>\r\n</tr>\r\n</table>\r\n\r\n### Refactor\r\nphpfmt's Refactor is a smart find&replace command which takes in consideration the context of the tokens. Therefore, it safely skips changes within strings or comment blocks.\r\n\r\n- In Sublime Text press `ctrl+shift+P`\r\n- Choose `phpfmt: refactor`\r\n- Type the code which you want it to find.\r\n- Type the code which you want it to replace with.\r\n\r\n### Installation\r\n####Requirements\r\n- **You must have a running copy of PHP on the machine you are running Sublime Text**\r\n\r\nPlugin runs better with PHP 5.5 or newer installed in the machine running the plugin. It works with PHP 5.4 if formatting only PHP 5.4 codes. *Do not attempt to format PHP 5.5 code with PHP 5.4 binary.*\r\n\r\n####Install this plugin through Package Manager.\r\n- In Sublime Text press `ctrl+shift+P`\r\n- Choose `Package Control: Install Package`\r\n- Choose `phpfmt`\r\n\r\n####Configuration (Windows)\r\n- Edit configuration file located at `%AppData%\\Sublime Text 2\\Packages\\phpfmt\\phpfmt.sublime-settings`\r\n- For field `\"php_bin\"` enter the path to the php.exe\r\n  Example: `\"php_bin\":\"c:/PHP/php.exe\"`\r\n\r\n### Settings\r\n```\r\n\"psr1\":false,\r\n\"psr2\":false,\r\n\"php_bin\":\"/usr/local/bin/php\",\r\n\"indent_with_space\":false,\r\n// This allows you to invoke the formatter when you feel like it\r\n\"format_on_save\":true\r\n```\r\n\r\n### Troubleshooting\r\n- If php errors display make sure you can run PHP from the command line\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}